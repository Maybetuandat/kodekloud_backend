package com.example.cms_be.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.example.cms_be.model.SetupStep;
import com.example.cms_be.repository.SetupStepRepository;
import com.example.cms_be.service.KubernetesService.CommandOutputHandler;
import com.example.cms_be.ultil.PodLogWebSocketHandler;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor
public class SetupExecutionService {

    private final SetupStepRepository setupStepRepository;
    private final PodLogWebSocketHandler webSocketHandler;
    private final KubernetesService kubernetesService;

    /**
     * Th·ª±c thi setup steps cho Admin test - HO√ÄN TO√ÄN TU·∫¶N T·ª∞ v·ªõi FULL BACKEND LOGGING
     */
    public boolean executeSetupStepsForAdminTest(Integer labId, String podName) {
        try {
            return executeSetupStepsSequentially(labId, podName);
        } catch (Exception e) {
            log.error("Error executing setup steps for lab {}: {}", labId, e.getMessage(), e);
            webSocketHandler.broadcastLogToPod(podName, "error", 
                "Failed to execute setup steps: " + e.getMessage(), null);
            return false;
        }
    }

    /**
     * Th·ª±c thi setup steps HO√ÄN TO√ÄN TU·∫¶N T·ª∞ v·ªõi ENHANCED BACKEND LOGGING
     */
    private boolean executeSetupStepsSequentially(Integer labId, String podName) throws Exception {
        log.info("========================================");
        log.info("üî• STARTING SEQUENTIAL SETUP EXECUTION");
        log.info("üè∑Ô∏è LAB ID: {}", labId);
        log.info("üöÄ POD NAME: {}", podName);
        log.info("========================================");
        
        webSocketHandler.broadcastLogToPod(podName, "start", 
            "üîÑ Starting SEQUENTIAL setup execution for lab " + labId, null);

        // L·∫•y setup steps theo th·ª© t·ª±
        List<SetupStep> setupSteps = setupStepRepository.findByLabIdOrderByStepOrder(labId);
        
        if (setupSteps.isEmpty()) {
            log.warn("‚ùå NO SETUP STEPS FOUND for lab {}", labId);
            webSocketHandler.broadcastLogToPod(podName, "warning", 
                "‚ùå No setup steps found for lab " + labId, null);
            return true;
        }

        log.info("üìã FOUND {} SETUP STEPS to execute sequentially", setupSteps.size());
        webSocketHandler.broadcastLogToPod(podName, "info", 
            String.format("üìã Found %d setup steps to execute SEQUENTIALLY", setupSteps.size()), null);

        // Hi·ªÉn th·ªã danh s√°ch steps tr∆∞·ªõc khi th·ª±c thi
        log.info("üìù SETUP STEPS OVERVIEW:");
        for (int i = 0; i < setupSteps.size(); i++) {
            SetupStep step = setupSteps.get(i);
            log.info("   Step {}: {} - Command: {}", 
                step.getStepOrder(), step.getTitle(), step.getSetupCommand());
        }
        log.info("========================================");

        // ƒê·ª£i pod s·∫µn s√†ng
        try {
            log.info("‚è≥ WAITING FOR POD TO BE READY...");
            webSocketHandler.broadcastLogToPod(podName, "info", "‚è≥ Waiting for pod to be ready...", null);
            kubernetesService.waitForPodReady(podName);
            log.info("‚úÖ POD IS READY!");
            webSocketHandler.broadcastLogToPod(podName, "info", "‚úÖ Pod is ready!", null);
            webSocketHandler.broadcastLogToPod(podName, "info", "üîÑ Allowing containers to initialize...", null);
        } catch (Exception e) {
            log.error("‚ùå POD NOT READY: {}", e.getMessage());
            webSocketHandler.broadcastLogToPod(podName, "error", 
                "‚ùå Pod not ready: " + e.getMessage(), null);
            return false;
        }

        boolean allStepsSuccessful = true;
        int completedSteps = 0;

        // ===== TH·ª∞C THI TU·∫¶N T·ª∞ TUY·ªÜT ƒê·ªêI =====
        for (int i = 0; i < setupSteps.size(); i++) {
            SetupStep step = setupSteps.get(i);
            
            try {
                log.info("========================================");
                log.info("üéØ EXECUTING STEP {}/{}", step.getStepOrder(), setupSteps.size());
                log.info("üìù TITLE: {}", step.getTitle());
                log.info("üíª COMMAND: {}", step.getSetupCommand());
                log.info("========================================");
                
                webSocketHandler.broadcastLogToPod(podName, "step", 
                    String.format("üîÑ Executing Step %d/%d: %s", 
                        step.getStepOrder(), setupSteps.size(), step.getTitle()), 
                    createStepData(step));

                // TH·ª∞C THI STEP V√Ä CH·ªú HO√ÄN TH√ÄNH HO√ÄN TO√ÄN
                boolean stepSuccess = executeStepSynchronously(step, podName);
                
                if (stepSuccess) {
                    completedSteps++;
                    log.info("‚úÖ STEP {} COMPLETED SUCCESSFULLY: {}", step.getStepOrder(), step.getTitle());
                    webSocketHandler.broadcastLogToPod(podName, "step_success", 
                        String.format("‚úÖ Step %d completed successfully: %s", 
                            step.getStepOrder(), step.getTitle()), 
                        createStepData(step));
                    
                    // DELAY B·∫ÆT BU·ªòC gi·ªØa c√°c steps
                    if (i < setupSteps.size() - 1) {
                        log.info("‚è±Ô∏è WAITING 3 seconds before next step for system stability...");
                        webSocketHandler.broadcastLogToPod(podName, "info", 
                            "‚è±Ô∏è Waiting 3 seconds before next step to ensure system stability...", null);
                        Thread.sleep(3000);
                    }
                    
                } else {
                    log.error("‚ùå STEP {} FAILED: {}", step.getStepOrder(), step.getTitle());
                    webSocketHandler.broadcastLogToPod(podName, "step_error", 
                        String.format("‚ùå Step %d failed: %s", step.getStepOrder(), step.getTitle()), 
                        createStepData(step));
                        
                    allStepsSuccessful = false;
                    
                    if (!Boolean.TRUE.equals(step.getContinueOnFailure())) {
                        log.info("üõë STOPPING EXECUTION due to step failure (continueOnFailure = false)");
                        webSocketHandler.broadcastLogToPod(podName, "error", 
                            "üõë Stopping execution due to step failure (continueOnFailure = false)", null);
                        break;
                    } else {
                        log.info("‚ö†Ô∏è CONTINUING EXECUTION despite step failure (continueOnFailure = true)");
                        webSocketHandler.broadcastLogToPod(podName, "warning", 
                            "‚ö†Ô∏è Step failed but continuing execution (continueOnFailure = true)", null);
                        
                        if (i < setupSteps.size() - 1) {
                            log.info("‚è±Ô∏è WAITING 3 seconds before next step (after failure)...");
                            webSocketHandler.broadcastLogToPod(podName, "info", 
                                "‚è±Ô∏è Waiting 3 seconds before next step (after failure)...", null);
                            Thread.sleep(3000);
                        }
                    }
                }

            } catch (Exception e) {
                log.error("üí• EXCEPTION EXECUTING STEP {}: {}", step.getId(), e.getMessage(), e);
                allStepsSuccessful = false;
                
                webSocketHandler.broadcastLogToPod(podName, "error", 
                    String.format("üí• Step %d failed with exception: %s", step.getStepOrder(), e.getMessage()), 
                    createStepData(step));
                
                if (!Boolean.TRUE.equals(step.getContinueOnFailure())) {
                    log.info("üõë STOPPING EXECUTION due to exception");
                    webSocketHandler.broadcastLogToPod(podName, "error", 
                        "üõë Stopping execution due to exception", null);
                    break;
                } else {
                    log.info("‚ö†Ô∏è CONTINUING EXECUTION despite exception (continueOnFailure = true)");
                    webSocketHandler.broadcastLogToPod(podName, "warning", 
                        "‚ö†Ô∏è Exception occurred but continuing execution (continueOnFailure = true)", null);
                    
                    if (i < setupSteps.size() - 1) {
                        log.info("‚è±Ô∏è WAITING 3 seconds before next step (after exception)...");
                        webSocketHandler.broadcastLogToPod(podName, "info", 
                            "‚è±Ô∏è Waiting 3 seconds before next step (after exception)...", null);
                        Thread.sleep(3000);
                    }
                }
            }
        }

        // LOG K·∫æT QU·∫¢ CU·ªêI C√ôNG
        log.info("========================================");
        log.info("üèÅ SEQUENTIAL SETUP EXECUTION COMPLETED");
        log.info("üè∑Ô∏è LAB ID: {}", labId);
        log.info("üöÄ POD NAME: {}", podName);
        log.info("‚úÖ SUCCESS: {}", allStepsSuccessful);
        log.info("üìä COMPLETED STEPS: {}/{}", completedSteps, setupSteps.size());
        log.info("üìà SUCCESS RATE: {}%", setupSteps.size() > 0 ? (completedSteps * 100 / setupSteps.size()) : 100);
        log.info("========================================");

        // G·ª≠i th√¥ng b√°o k·∫øt th√∫c
        String finalMessage = allStepsSuccessful ? 
            String.format("üéâ All %d setup steps completed successfully in SEQUENTIAL order!", setupSteps.size()) : 
            String.format("‚ö†Ô∏è Sequential setup execution completed with errors (%d/%d steps successful)", 
                completedSteps, setupSteps.size());
            
        webSocketHandler.broadcastLogToPod(podName, allStepsSuccessful ? "success" : "warning", 
            finalMessage, createExecutionSummary(setupSteps.size(), completedSteps, allStepsSuccessful));
            
        return allStepsSuccessful;
    }

    /**
     * Th·ª±c thi m·ªôt setup step c·ª• th·ªÉ HO√ÄN TO√ÄN ƒê·ªíNG B·ªò v·ªõi FULL BACKEND LOGGING
     */
    private boolean executeStepSynchronously(SetupStep step, String podName) throws Exception {
        int retryCount = step.getRetryCount() != null ? step.getRetryCount() : 1;
        int timeoutSeconds = step.getTimeoutSeconds() != null ? step.getTimeoutSeconds() : 300;
        Integer expectedExitCode = step.getExpectedExitCode() != null ? step.getExpectedExitCode() : 0;

        log.info("‚öôÔ∏è STEP CONFIGURATION:");
        log.info("   Expected Exit Code: {}", expectedExitCode);
        log.info("   Timeout: {} seconds", timeoutSeconds);
        log.info("   Retry Count: {}", retryCount);
        log.info("   Continue on Failure: {}", step.getContinueOnFailure());

        webSocketHandler.broadcastLogToPod(podName, "info", 
            String.format("‚öôÔ∏è Step config - Expected exit: %d, Timeout: %ds, Retries: %d", 
                expectedExitCode, timeoutSeconds, retryCount), null);

        for (int attempt = 1; attempt <= retryCount; attempt++) {
            try {
                if (attempt > 1) {
                    log.info("üîÑ RETRY ATTEMPT {}/{} for step {}", attempt, retryCount, step.getStepOrder());
                    webSocketHandler.broadcastLogToPod(podName, "retry", 
                        String.format("üîÑ Retry attempt %d/%d for step %d", attempt, retryCount, step.getStepOrder()), null);
                    
                    log.info("‚è±Ô∏è WAITING 5 seconds before retry...");
                    webSocketHandler.broadcastLogToPod(podName, "info", 
                        "‚è±Ô∏è Waiting 5 seconds before retry to ensure system cleanup...", null);
                    Thread.sleep(5000);
                }

                log.info("üíª EXECUTING COMMAND: {}", step.getSetupCommand());
                webSocketHandler.broadcastLogToPod(podName, "log", 
                    String.format("üíª Executing command: %s", step.getSetupCommand()), null);

                // Enhanced CommandOutputHandler v·ªõi FULL BACKEND LOGGING
                CommandOutputHandler outputHandler = new CommandOutputHandler() {
                    private int stdoutLineNumber = 1;
                    private int stderrLineNumber = 1;
                    
                    @Override
                    public void onStdout(String line) {
                        // Backend logging ƒë√£ ƒë∆∞·ª£c handle trong KubernetesService
                        // Ch·ªâ g·ª≠i ƒë·∫øn WebSocket cho frontend
                        webSocketHandler.broadcastLogToPod(podName, "stdout", line, null);
                    }

                    @Override
                    public void onStderr(String line) {
                        // Backend logging ƒë√£ ƒë∆∞·ª£c handle trong KubernetesService
                        // Ch·ªâ g·ª≠i ƒë·∫øn WebSocket cho frontend
                        webSocketHandler.broadcastLogToPod(podName, "stderr", line, null);
                    }
                };

                log.info("üöÄ [STEP-{}] STARTING COMMAND EXECUTION", step.getStepOrder());
                
                // S·ª¨ D·ª§NG METHOD M·ªöI ƒê·ªÇ L·∫§Y ƒê·∫¶Y ƒê·ª¶ OUTPUT V√Ä LOG BACKEND
                KubernetesService.CommandResult result = kubernetesService.executeCommandInPodWithOutput(
                    podName, step.getSetupCommand(), timeoutSeconds, outputHandler);
                
                // LOG K·∫æT QU·∫¢ CHI TI·∫æT
                log.info("‚úÖ [STEP-{}] COMMAND COMPLETED", step.getStepOrder());
                log.info("   Exit Code: {} (Expected: {})", result.getExitCode(), expectedExitCode);
                log.info("   STDOUT Length: {} characters", result.getStdout().length());
                log.info("   STDERR Length: {} characters", result.getStderr().length());
                log.info("   Total Output Length: {} characters", result.getCombinedOutput().length());
                
                // SEND SUMMARY TO WEBSOCKET
                webSocketHandler.broadcastLogToPod(podName, "output_summary", 
                    String.format("üìã Command completed - Exit: %d, Output: %d chars", 
                        result.getExitCode(), result.getCombinedOutput().length()), 
                    Map.of(
                        "exitCode", result.getExitCode(),
                        "expectedExitCode", expectedExitCode,
                        "stdoutLength", result.getStdout().length(),
                        "stderrLength", result.getStderr().length(),
                        "totalLength", result.getCombinedOutput().length(),
                        "attempt", attempt,
                        "maxAttempts", retryCount
                    ));

                webSocketHandler.broadcastLogToPod(podName, "log", 
                    String.format("üì§ Exit code: %d (expected: %d)", result.getExitCode(), expectedExitCode), null);

                // Check exit code
                if (result.getExitCode() == expectedExitCode) {
                    log.info("‚úÖ [STEP-{}] SUCCESS - Exit code matches expected value", step.getStepOrder());
                    webSocketHandler.broadcastLogToPod(podName, "info", 
                        "‚è±Ô∏è Command completed successfully, waiting 1 second for cleanup...", null);
                    Thread.sleep(1000);
                    return true;
                } else {
                    log.warn("‚ùå [STEP-{}] FAILED - Exit code mismatch: got {}, expected {}", 
                        step.getStepOrder(), result.getExitCode(), expectedExitCode);
                    
                    webSocketHandler.broadcastLogToPod(podName, "warning", 
                        String.format("‚ö†Ô∏è Exit code mismatch: got %d, expected %d", result.getExitCode(), expectedExitCode), null);
                    
                    if (attempt == retryCount) {
                        log.error("‚ùå [STEP-{}] FINAL FAILURE after {} attempts", step.getStepOrder(), retryCount);
                        return false;
                    }
                    log.info("üîÑ [STEP-{}] Will retry - attempt {}/{}", step.getStepOrder(), attempt, retryCount);
                }
                
            } catch (Exception e) {
                log.error("üí• [STEP-{}] EXCEPTION on attempt {}/{}: {}", 
                    step.getStepOrder(), attempt, retryCount, e.getMessage());
                webSocketHandler.broadcastLogToPod(podName, "error", 
                    String.format("‚ö†Ô∏è Attempt %d/%d failed: %s", attempt, retryCount, e.getMessage()), null);
                
                if (attempt == retryCount) {
                    log.error("‚ùå [STEP-{}] FINAL EXCEPTION after {} attempts", step.getStepOrder(), retryCount);
                    throw e;
                }
                log.info("üîÑ [STEP-{}] Will retry after exception - attempt {}/{}", step.getStepOrder(), attempt, retryCount);
            }
        }
        
        return false;
    }

    /**
     * T·∫°o step data cho WebSocket
     */
    private Object createStepData(SetupStep step) {
        return Map.of(
            "stepId", step.getId(),
            "stepOrder", step.getStepOrder(),
            "title", step.getTitle(),
            "command", step.getSetupCommand(),
            "timeout", step.getTimeoutSeconds() != null ? step.getTimeoutSeconds() : 300,
            "retryCount", step.getRetryCount() != null ? step.getRetryCount() : 1,
            "continueOnFailure", step.getContinueOnFailure() != null ? step.getContinueOnFailure() : false,
            "expectedExitCode", step.getExpectedExitCode() != null ? step.getExpectedExitCode() : 0
        );
    }

    /**
     * T·∫°o execution summary
     */
    private Object createExecutionSummary(int totalSteps, int completedSteps, boolean allSuccessful) {
        return Map.of(
            "totalSteps", totalSteps,
            "completedSteps", completedSteps,
            "successRate", totalSteps > 0 ? (double) completedSteps / totalSteps * 100 : 0,
            "allSuccessful", allSuccessful,
            "executionMode", "SEQUENTIAL",
            "timestamp", java.time.LocalDateTime.now().toString()
        );
    }
}